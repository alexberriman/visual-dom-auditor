name: Visual DOM Auditor
description: A CLI tool for detecting critical layout issues on webpages using a headless browser.

# Project type
project_type: "node"

# Project brief/documentation
project:
  brief_file: README.md
  vision: "Creating a robust DOM analysis tool to detect visual rendering issues on websites"
  key_goals:
    - "Build a CLI tool using Commander.js for easy command-line interaction"
    - "Implement DOM inspection capabilities with Playwright"
    - "Detect overlapping elements, broken padding, and spacing issues"
    - "Support multiple viewports and device emulation"
    - "Create a tool designed for automated visual QA in CI/CD pipelines"
    - "Provide structured JSON output for integration with other tools"
  design_principles: "Clean, functional Node.js code with strong typing and excellent error handling."

# Claude interaction settings
claude:
  # Enable mainline development (commit directly to main)
  main_only: true

  # Exit when completion code found
  exit_on_complete: false

  # Default settings
  confirmation_wait_time: 5
  idle_threshold: 2
  skip_git_checks: true

# Enable Claude.md file generation
claude_md:
  enabled: true
  skip_tech_guidelines: true

  # Explicitly define project category
  project_category: "fullstack"

  # Code style conventions for Claude.md
  code_style:
    case_style: "kebab-case"
    indentation: "spaces"
    indent_size: 2
    quote_style: "double"
    max_line_length: 100
    trailing_comma: true
    semicolons: true
    component_structure: "directory"
    test_pattern: "{name}.test.ts"

  # Preferred technologies
  preferred_technologies:
    cli:
      language: "typescript"
      framework: "commander"
      browser_automation: "playwright"
      error_handling: "ts-results"
      # Define architecture patterns
      patterns:
        functional_approach: true
        small_pure_functions: true
        feature_based_modules: true
        barrel_files: true
    testing:
      unit: "vitest"
      location: "adjacent"
    build:
      bundler: "tsup"

  # Custom additional sections for CLAUDE.md
  additional_sections:
    - title: "CLI Architecture"
      content: |
        This CLI tool follows these architectural principles:

        - **Command-line Interface**: Uses Commander.js for argument parsing
        - **Browser Automation**: Playwright for DOM inspection and analysis
        - **TypeScript**: Strong typing throughout the codebase
        - **Error Handling**: Functional error handling with ts-results
        - **Modular Design**: Separate concerns into focused modules
        - **Pure Functions**: Maximize testability with pure functions

    - title: "Module Structure"
      content: |
        The project should be organized as follows:

        ```
        src/
          index.ts          # CLI entry point (#!/usr/bin/env node)
          auditor.ts        # Core DOM auditing functionality
          analyzers/        # Different DOM analyzers
            overlap.ts      # Detect overlapping elements
            padding.ts      # Check button padding
            spacing.ts      # Check element spacing
          types/            # TypeScript type definitions
            index.ts
            options.ts
            errors.ts
            issues.ts       # Types for detected issues
          utils/            # Utility functions
            viewport.ts
            error.ts
            validator.ts
            dom-helpers.ts  # DOM traversal helpers
          config/           # Configuration handling
            defaults.ts
        ```

    - title: "Error Handling Guidelines"
      content: |
        When implementing error handling:

        - Use ts-results for all fallible operations
        - Return Result<T, E> from functions that might fail
        - Provide descriptive error messages
        - Never silence errors or use try/catch except at boundaries
        - Exit with appropriate exit codes (0 for success, 1 for errors)
        - Use console.error for error output
        - Use console.log for success output

  # Permissions for Claude
  allow_permissions:
    enabled: true
    allow_read: ["**/*"]
    allow_write: ["**/*"]
    allow_executions: ["npm", "npx", "tsx"]

# Commands to execute when Claude is idle
commands:
  lint: npm run lint
  typecheck: npm run typecheck
  test: npm run test

# Command execution sequence
command_sequence: ["lint", "typecheck", "test"]

# Define quality standards to enforce
quality_standards:
  # Required dev dependencies
  required_devDependencies:
    - "eslint"
    - "prettier"
    - "typescript"
    - "vitest"
    - "@typescript-eslint/eslint-plugin"
    - "@typescript-eslint/parser"
    - "eslint-config-prettier"
    - "eslint-plugin-unicorn"
    - "eslint-plugin-sonarjs"
    - "husky"
    - "lint-staged"
    - "tsup"
    - "tsx"

  # Configuration files that must exist
  required_config_files:
    - "eslint.config.js"
    - "tsconfig.json"
    - "vitest.config.ts"
    - ".husky/pre-commit"

# Custom prompts
prompts:
  # Updated prompt for Claude when errors occur
  error_fix: |
    Please fix issues and warnings that occurred when running `{command}`.
    Important guidelines:

    1. Do NOT use `eslint-disable`, `ts-ignore`, or any other suppression comments
    2. Do NOT use the `any` type in TypeScript - always use proper type definitions
    3. Fix the root causes of each issue correctly and cleanly
    4. Ensure your changes follow the existing code style and patterns

    Remember these key principles:
    1. Create small, pure functions with a single responsibility
    2. Use strong TypeScript typing - no any, unknown, or missing types
    3. Follow kebab-case for file names and maintain proper module structure
    4. Use functional error handling with ts-results
    5. Provide comprehensive error messages and validation

    Focus on creating high-quality CLI code that addresses the underlying issues.

    If you can't fix all issues, pick the most critical ones first, think deeply about proper solutions, and implement them correctly. Never bypass eslint or typescript rules.

  # Prompt sent for todo list guidance
  todo_prompt: |
    Please follow these steps for each task:

    1. First, check `./TODO.md` and review all tasks
    2. Update TODO.md to mark completed tasks (use âœ… or [DONE] prefix)
    3. Select ONLY ONE next incomplete task to work on. Stay on main branch.
    4. Think very deeply about this ONE task before implementing
    5. Break the task into smaller, logical steps
    6. Focus on implementing ONE step at a time
    7. Use conventional commits (feat, fix, docs, style, refactor, perf, test, chore)
    8. After completing the task, update TODO.md

    IMPORTANT: Complete ONE task fully before moving to the next.

    DOM Auditor Requirements:
    - Build robust command-line interface with Commander.js
    - Use Playwright for headless browser DOM inspection
    - Implement detection algorithms for visual layout issues
    - Develop accurate overlap detection between elements
    - Create button padding validation logic
    - Implement spacing inspection between adjacent elements
    - Support multiple viewport sizes and device emulation
    - Generate structured JSON reports of detected issues
    - Implement comprehensive error handling with ts-results
    - Create pure, testable utility functions
    - Handle timeouts and network issues gracefully
    - Provide clear error messages and exit codes
    - Design for automated visual QA in CI/CD pipelines

    Module Organization:
    1. Keep modules focused and single-purpose
    2. Use barrel files (index.ts) to export public interfaces
    3. Place utility functions in utils/ directory
    4. Organize analyzers in dedicated analyzers/ directory
    5. Keep types in dedicated types/ directory
    6. Test all pure functions thoroughly

    Focus on building a professional, production-ready DOM auditing tool.
